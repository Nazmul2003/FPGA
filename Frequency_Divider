-- Counter:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;

entity counter is
    Port ( CLK : in  STD_LOGIC;
           RST : in  STD_LOGIC;
           Q : out  STD_LOGIC_VECTOR (3 downto 0));
end counter;

architecture Behavioral of counter is
signal cnt : std_logic_vector(3 downto 0) := "0000";
begin
process(CLK, RST)
begin
if(RST='1')then
	cnt<="0000";
elsif(CLK'event)then
	cnt<=cnt+'1';
end if;
end process;
Q<=cnt;
end Behavioral;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- D FlipFlop:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity D_FF is
    Port ( D : in  STD_LOGIC;
           CLK : in  STD_LOGIC;
           RST : in  STD_LOGIC;
           Q : out  STD_LOGIC);
end D_FF;

architecture Behavioral of D_FF is

begin
process(CLK, RST)
begin
if(RST='1')then
	Q<='0';
elsif(CLK'event)then
	Q<=D;
end if;
end process;
end Behavioral;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Comparator:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;

entity comparator is
    Port ( M : in  STD_LOGIC_VECTOR (3 downto 0);
           N : in  STD_LOGIC_VECTOR (3 downto 0);
           Q : out  STD_LOGIC);
end comparator;

architecture Behavioral of comparator is

begin
process(M, N)
begin
if(M=N-'1')then
	Q<='1';
else
	Q<='0';
end if;
end process;

end Behavioral;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Frequency Divider:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;

entity freq_divider is
    Port ( N : in  STD_LOGIC_VECTOR (3 downto 0);
           CLK : in  STD_LOGIC;
           RST : in  STD_LOGIC;
           Q : out  STD_LOGIC);
end freq_divider;

architecture Behavioral of freq_divider is
component counter is
    Port ( CLK : in  STD_LOGIC;
           RST : in  STD_LOGIC;
           Q : out  STD_LOGIC_VECTOR (3 downto 0));
end component;
component D_FF is
    Port ( D : in  STD_LOGIC;
           CLK : in  STD_LOGIC;
           RST : in  STD_LOGIC;
           Q : out  STD_LOGIC);
end component;
component comparator is
    Port ( M : in  STD_LOGIC_VECTOR (3 downto 0);
           N : in  STD_LOGIC_VECTOR (3 downto 0);
           Q : out  STD_LOGIC);
end component;

signal M : std_logic_vector(3 downto 0) := "0000";
signal t1, t2, temp, flag, comp : std_logic := '0';

begin
CTR : counter port map(CLK, flag, M);
DFF1 : D_FF port map(temp, CLK, RST, t1);
comparator_1 : comparator port map(M, N, comp);

process(comp, N, RST, CLK, temp)
begin

flag<='0';
t2<=t1;

if(RST='1')then
	flag<='1';
	temp<='0';
elsif(N="0000")then
	flag<='1';
	temp<='0';
	t2<='X';
--elsif(comp='1')then
elsif(comp='1' and CLK'event)then
	temp<=not temp;
	flag<='1';

end if;

end process;

Q<=t2;

end Behavioral;

